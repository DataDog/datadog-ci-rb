---
description:
globs: *.rb
alwaysApply: false
---
## Ruby usage

- We use Ruby 2.7 syntax
- Use exceptions for exceptional cases, not for control flow.
- Implement proper error logging and user-friendly messages.

## Type checking

- RBS is used for static type checking
- Type definitions are in the `sig/` directory
- Update type definitions when modifying code
- Run `bundle exec rake steep:check` to verify type correctness
- Always run `bundle exec rake steep:check` after any update to RBS files
- When deleting Ruby files, delete corresponding RBS file. Run `bundle exec rake rbs:clean` to make sure that there are no unnecessary RBS files.
- Avoid using `untyped` type, use it only when it is not feasible to derive the correct type
- Do not write types like `(nil | Type)`, use `Type?` instead
- See [StaticTypingGuide.md](mdc:docs/StaticTypingGuide.md) for details

## Code Quality

- @standardrb is used for code style enforcement
- Run `bundle exec standardrb` to check code quality
- Ensure all code passes style checks before submitting

## Commands

- %contrib given the name of external gem, create a new subfolder in lib/datadog/ci/contrib folder with the name of the external gem. In this subfolder create files `patcher.rb`, `integration.rb`, `ext.rb`, `configuration/settings.rb`. Look into `lib/datadog/ci/contrib/activesupport` to see what these files should look like. Create RBS type definitions for new files. Look into `sig/datadog/ci/contrib/activesupport` folder for an example of how type definitions should look like. Add corresponding require in `lib/datadog/ci.rb`.
- %steep run `bundle exec rake steep:check`. If there are typechecking errors, examine and fix them.
- %rbs for the files the current context examine the current changes and fix (or create) corresponding rbs files