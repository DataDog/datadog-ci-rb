version: 2.1

# Common variables, containers, jobs and steps.
job_defaults: &job_defaults
  # TODO: We should move away from using a directory
  # TODO: that requires root permission to be created.
  # TODO: Changing this requires rebuilding all docker images.
  working_directory: /app
  shell: /bin/bash --login

test_containers:
  - &job_parameters
    parameters:
      ruby_version:
        description: Ruby version
        type: string
      image:
        description: Docker image location
        type: string
      resource_class_to_use:
        description: Resource class to use
        type: string
        default: medium
      edge:
        description: Use latest version of dependencies during testing
        type: boolean
        default: false
    resource_class: <<parameters.resource_class_to_use>>
  - &container_base_environment
    BUNDLE_GEMFILE: /app/Gemfile
    # Faster JVM startup: https://github.com/jruby/jruby/wiki/Improving-startup-time#use-the---dev-flag
    JRUBY_OPTS: --dev
    # Override number of concurrent compiles in grpc gem, see https://github.com/grpc/grpc/pull/28250 and https://github.com/DataDog/dd-trace-rb/issues/1791
    # If you see gem installation failing with "Killed" on CircleCI and `gem install --platform ruby grpc` reproduces the
    # issue when you connect to the testing container via ssh, then try lowering this file a notch.
    GRPC_RUBY_BUILD_PROCS: 6
    DDTRACE_CI: true
  - &container_parameters_environment
    - *container_base_environment
    - TEST_DATADOG_INTEGRATION: 1
    - COVERAGE_BASE_DIR: coverage
  - &container_base
    image: <<parameters.image>>
    environment:
      *container_parameters_environment
  - &test_job_default
    <<: *job_defaults
    <<: *job_parameters
    docker:
      - *container_base
  - &container_agent
    image: datadog/agent
    environment:
      - DD_APM_ENABLED=true
      - DD_BIND_HOST=0.0.0.0
      - DD_API_KEY=00000000000000000000000000000000
      - DD_HOSTNAME=dd-trace-rb-ci
  - &agent_port 8126

check_exact_bundle_cache_hit: &check_exact_bundle_cache_hit
  run:
    name: Check if we restored an exact cache of gems that this job requires
    # CircleCI doesn't tell us if we had a perfect cache match or partial match.
    # To accomplish such check, we save `bundle_checksum` alongside the cached
    # gems. After gems are restored, we compare the restored `bundle_checksum`'s
    # content with the current commit's `bundle_checksum`.
    #
    # Because we are using a "soft" approach to our gemset lock files, we allow
    # for partial matches to lock files until a new release goes out.
    # This means that we might install slightly out of date gems, instead of the
    # very latest versions from RubyGems until the next gemset update commit.
    command: |
      ! cmp -s .circleci/bundle_checksum /usr/local/bundle/bundle_checksum
      echo "export CI_BUNDLE_CACHE_HIT=$?" >> $BASH_ENV
save_bundle_checksum: &save_bundle_checksum
  run:
    name: Save current bundle checksum alongside cached gems
    command: |
      if [ "$CI_BUNDLE_CACHE_HIT" != 1 ]; then
        # Recompute gemfiles/*.lock checksum, as those files might have changed
        cat Gemfile Gemfile.lock Appraisals gemfiles/*.gemfile.lock | md5sum > .circleci/bundle_checksum
      fi
      cp .circleci/bundle_checksum /usr/local/bundle/bundle_checksum
step_bundle_install: &step_bundle_install
  run:
    name: Install gem dependencies
    command: |
      if [ "$CI_BUNDLE_CACHE_HIT" != 1 ]; then
        bundle install
      else
        echo "All required gems were found in cache."
      fi
step_rubocop: &step_rubocop
  run:
    name: Delint with Rubocop
    # There's no straightforward way to get the number of available processors & CPU threads in CircleCI.
    # Currently it always return 18 physical processors and 36 threads, regardless of executor size.
    # The workaround is to use `cpu.shares / 1024`:
    # https://discuss.circleci.com/t/environment-variable-set-to-the-number-of-available-cpus/32670/4
    command: PARALLEL_PROCESSOR_COUNT=$((`cat /sys/fs/cgroup/cpu/cpu.shares` / 1024)) bundle exec standardrb
step_appraisal_install: &step_appraisal_install
  run:
    name: Install Appraisal gems
    command: |
      if [ "$CI_BUNDLE_CACHE_HIT" != 1 ]; then
        bundle exec appraisal install
      else
        bundle exec appraisal generate # Generate the appraisal files to match the lockfiles in the tree
        echo "All required gems were found in cache."
      fi
# step_appraisal_update: &step_appraisal_update
#   run:
#     name: Update Appraisal gems
#     command: | # Remove all generated gemfiles and lockfiles, resolve, and install dependencies again
#       bundle exec appraisal update
step_compute_bundle_checksum: &step_compute_bundle_checksum
  run:
    name: Compute bundle checksum
    # This checksum leaves some leeway for changes to Gemfile.lock, as
    # we have a "soft" approach to committing gemset changes until release, given
    # updating the gemset lock files produces extremely large commits.
    command: |
      bundle lock # Create Gemfile.lock
      cat Gemfile Gemfile.lock Appraisals gemfiles/*.gemfile.lock | md5sum > .circleci/bundle_checksum
step_run_all_tests: &step_run_all_tests
  run:
    name: Run tests
    command: |
        # Ensures it's possible to debug hung tests in CI
        echo "--format=documentation" >> .rspec-local

        # Configure RSpec metadata exporter
        echo "
        --format=RspecJunitFormatter
        --out='/tmp/rspec/-<%= ARGV.join.gsub('/', '-') %>.xml'
        " >> .rspec-local

        bundle exec rake ci
# step_release_docs: &step_release_docs
#   run:
#     name: Upload release docs
#     command: S3_DIR=trace bundle exec rake release:docs

filters_all_branches_and_tags: &filters_all_branches_and_tags
  filters:
    tags:
      only: /.*/
filters_only_release_tags: &filters_only_release_tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v\d+(\.\d+){0,3}(\.(alpha|beta|rc)\d+)?$/

orbs:
  orb:
    # orbs:
    #   codecov: codecov/codecov@3.2.3
    jobs:
      build:
        <<: *test_job_default
        resource_class: <<parameters.resource_class_to_use>>
        steps:
          - checkout
          - restore_cache:
              keys:
                - '{{ .Environment.CIRCLE_CACHE_VERSION }}-bundled-repo-<<parameters.ruby_version>>-{{ .Environment.CIRCLE_SHA1 }}'
          - *step_compute_bundle_checksum
          - restore_cache:
              keys:
                - bundle-{{ .Environment.CIRCLE_CACHE_VERSION }}-{{ checksum ".circleci/images/primary/binary_version" }}-<<parameters.ruby_version>>-{{ checksum "lib/datadog/ci/version.rb" }}-{{ .Branch }}-{{ checksum ".circleci/bundle_checksum" }}
                - bundle-{{ .Environment.CIRCLE_CACHE_VERSION }}-{{ checksum ".circleci/images/primary/binary_version" }}-<<parameters.ruby_version>>-{{ checksum "lib/datadog/ci/version.rb" }}-{{ .Branch }}-
                - bundle-{{ .Environment.CIRCLE_CACHE_VERSION }}-{{ checksum ".circleci/images/primary/binary_version" }}-<<parameters.ruby_version>>-{{ checksum "lib/datadog/ci/version.rb" }}
          - *check_exact_bundle_cache_hit
          - *step_bundle_install
          - *step_appraisal_install
          - *save_bundle_checksum
          - save_cache:
              key: '{{ .Environment.CIRCLE_CACHE_VERSION }}-bundled-repo-<<parameters.ruby_version>>-{{ .Environment.CIRCLE_SHA1 }}'
              paths:
                - /app
          - save_cache:
              key: bundle-{{ .Environment.CIRCLE_CACHE_VERSION }}-{{ checksum ".circleci/images/primary/binary_version" }}-<<parameters.ruby_version>>-{{ checksum "lib/datadog/ci/version.rb" }}-{{ .Branch }}-{{ checksum ".circleci/bundle_checksum" }}
              paths:
                - /usr/local/bundle
      test:
        <<: *test_job_default
        docker:
          - <<: *container_base
          - *container_agent
        parallelism: 10
        steps:
          - restore_cache:
              keys:
                - '{{ .Environment.CIRCLE_CACHE_VERSION }}-bundled-repo-<<parameters.ruby_version>>-{{ .Environment.CIRCLE_SHA1 }}'
          - restore_cache:
              keys:
                - bundle-{{ .Environment.CIRCLE_CACHE_VERSION }}-{{ checksum ".circleci/images/primary/binary_version" }}-<<parameters.ruby_version>>-{{ checksum "lib/datadog/ci/version.rb" }}-{{ .Branch }}-{{ checksum ".circleci/bundle_checksum" }}
          # - run:
          #     name: Set coverage report directory
          #     command: |
          #       # Create a unique coverage directory for this job, to avoid conflicts when merging all results
          #       echo 'export COVERAGE_DIR="$COVERAGE_BASE_DIR/versions/$CIRCLE_JOB/$CIRCLE_NODE_INDEX"' >> $BASH_ENV
          # Wait for containers to start
          - docker-wait:
              port: *agent_port
          - *step_run_all_tests
          - store_test_results:
              path: /tmp/rspec
          # - persist_to_workspace:
          #     root: .
          #     paths:
          #       - coverage
      lint:
        <<: *test_job_default
        steps:
          - restore_cache:
              keys:
                - '{{ .Environment.CIRCLE_CACHE_VERSION }}-bundled-repo-<<parameters.ruby_version>>-{{ .Environment.CIRCLE_SHA1 }}'
          - restore_cache:
              keys:
                - bundle-{{ .Environment.CIRCLE_CACHE_VERSION }}-{{ checksum ".circleci/images/primary/binary_version" }}-<<parameters.ruby_version>>-{{ checksum "lib/datadog/ci/version.rb" }}-{{ .Branch }}-{{ checksum ".circleci/bundle_checksum" }}
          - *step_rubocop
      # coverage:
      #   <<: *test_job_default
      #   steps:
      #     - restore_cache:
      #         keys:
      #           - '{{ .Environment.CIRCLE_CACHE_VERSION }}-bundled-repo-<<parameters.ruby_version>>-{{ .Environment.CIRCLE_SHA1 }}'
      #     - restore_cache:
      #         keys:
      #           - bundle-{{ .Environment.CIRCLE_CACHE_VERSION }}-{{ checksum ".circleci/images/primary/binary_version" }}-<<parameters.ruby_version>>-{{ checksum "lib/datadog/ci/version.rb" }}-{{ .Branch }}-{{ checksum ".circleci/bundle_checksum" }}
      #     - attach_workspace:
      #         at: /tmp/workspace
      #     - run:
      #         name: Generate combined coverage report for all tests
      #         command: COVERAGE_DIR=/tmp/workspace/coverage bundle exec rake coverage:report
      #     - codecov/upload:
      #         file: /tmp/workspace/coverage/report/coverage.xml
      #     - run:
      #         name: Generate individual coverage report for each Ruby version
      #         command: COVERAGE_DIR=/tmp/workspace/coverage bundle exec rake coverage:report_per_ruby_version
      #     - store_artifacts:
      #         path: /tmp/workspace/coverage/report/
      #         destination: coverage
      # changelog:
      #   <<: *test_job_default
      #   steps:
      #     - restore_cache:
      #         keys:
      #           - '{{ .Environment.CIRCLE_CACHE_VERSION }}-bundled-repo-<<parameters.ruby_version>>-{{ .Environment.CIRCLE_SHA1 }}'
      #     - restore_cache:
      #         keys:
      #           - bundle-{{ .Environment.CIRCLE_CACHE_VERSION }}-{{ checksum ".circleci/images/primary/binary_version" }}-<<parameters.ruby_version>>-{{ checksum "lib/datadog/ci/version.rb" }}-{{ .Branch }}-{{ checksum ".circleci/bundle_checksum" }}
      #     - attach_workspace:
      #         at: /tmp/workspace
      #     - run:
      #         name: Format changelog
      #         command: bundle exec rake changelog:format
      #     - run:
      #         name: Check if changelog was unformatted
      #         command: |
      #           if ! git diff-files --quiet; then
      #             echo "Please run 'bundle exec rake changelog:format' and commit the results."
      #           fi
    commands:
      docker-wait:
        description: Wait for containers to listen on a TCP port.
        parameters:
          port:
            description: TCP port the container is listening on.
            type: integer
          timeout:
            description: How long to wait for the port to be responsive.
            type: string
            default: 1m
        steps:
          - run:
              name: Wait for container on port <<parameters.port>>
              command: dockerize -wait 'tcp://localhost:<<parameters.port>>' -timeout '<<parameters.timeout>>'
    executors:
      docker-integration:
        docker:
          - image: circleci/buildpack-deps:stretch

# jobs:
  # "deploy release":
  #   <<: *job_defaults
  #   docker:
  #     - environment:
  #         *container_base_environment
  #       image: ghcr.io/datadog/dd-trace-rb/ruby:2.5.9-dd
  #   resource_class: small
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install AWS CLI
  #         command: |
  #           apt-get -y -qq update
  #           apt-get -y -qq install awscli
  #     - *step_bundle_install
  #     - *step_release_docs
  #     - run:
  #         name: Upload release Gem and rebuild index
  #         command: S3_DIR=release bundle exec rake release:gem
  #     - store_artifacts:
  #         path: pkg/
  #         destination: gem
  # "deploy prerelease Gem":
  #   <<: *job_defaults
  #   docker:
  #     - environment:
  #         *container_base_environment
  #       image: ghcr.io/datadog/dd-trace-rb/ruby:2.5.9-dd
  #   resource_class: small
  #   steps:
  #     - run:
  #         name: Check if this commit author has publishing credentials
  #         command: |
  #           if [[ -z "${AWS_ACCESS_KEY_ID}" ]]
  #           then
  #             echo 'No AWS credentials, skipping publish of pre-release build.'
  #             circleci task halt
  #           fi
  #     - checkout
  #     - run:
  #         name: Install AWS CLI
  #         command: |
  #           apt-get -y -qq update
  #           apt-get -y -qq install awscli
  #     - *step_bundle_install
  #     - run:
  #         name: Rename to pre-release version based on branch name and build number
  #         command: |
  #           # create safe version string
  #           PRE=$(echo "${CIRCLE_BRANCH:-unknown}.${CIRCLE_BUILD_NUM:-R$RANDOM}" | sed -e 's/[^a-zA-Z0-9+]\{1,\}/./g')
  #           echo PRE=$PRE
  #           sed lib/datadog/ci/version.rb -i -e "s/^\([\t ]*PRE\) *=*/\1 = \'${PRE}\' #/g"
  #     - run:
  #         name: Upload prerelease Gem and rebuild index
  #         # This was bumped from prerelease to prerelease-v2 to avoid the issue documented in
  #         # https://github.com/DataDog/dd-trace-rb/pull/1358
  #         command: S3_DIR=prerelease-v2 bundle exec rake release:gem
  #     - store_artifacts:
  #         path: pkg/
  #         destination: gem

job_configuration:
  # MRI
  - &config-2_7
    <<: *filters_all_branches_and_tags
    ruby_version: 'ruby-2.7.6'
    image: ghcr.io/datadog/dd-trace-rb/ruby:2.7.6-dd
    resource_class_to_use: medium+
  - &config-3_0
    <<: *filters_all_branches_and_tags
    ruby_version: 'ruby-3.0.4'
    image: ghcr.io/datadog/dd-trace-rb/ruby:3.0.4-dd
    resource_class_to_use: medium+
  - &config-3_1
    <<: *filters_all_branches_and_tags
    ruby_version: 'ruby-3.1.2'
    image: ghcr.io/datadog/dd-trace-rb/ruby:3.1.2-dd
    resource_class_to_use: medium+
  - &config-3_2
    <<: *filters_all_branches_and_tags
    ruby_version: 'ruby-3.2.0'
    image: ghcr.io/datadog/dd-trace-rb/ruby:3.2.0-dd
    resource_class_to_use: medium+
  - &config-3_3
    <<: *filters_all_branches_and_tags
    ruby_version: 'ruby-3.3.0'
    image: ghcr.io/datadog/dd-trace-rb/ruby:3.3.0-dd
    resource_class_to_use: medium+
  - &config-3_2-small
    <<: *config-3_2
    resource_class_to_use: small
    # ADD NEW RUBIES HERE
  - &config-jruby-9_4
    <<: *filters_all_branches_and_tags
    ruby_version: 'jruby-9.4.0.0'
    image: ghcr.io/datadog/dd-trace-rb/jruby:9.4.0.0-dd
    resource_class_to_use: medium+

workflows:
  version: 2
  build-and-test:
    jobs:
      - orb/lint:
          <<: *config-3_2-small
          name: lint
          requires:
            - build-3.2
      # - orb/coverage:
      #     <<: *config-3_2-small
      #     name: coverage
      #     requires:
      #       - test-2.7
      #       - test-3.0
      #       - test-3.1
      #       - test-3.2
      #       - test-3.3
      #       # ADD NEW RUBIES HERE
      #       - test-jruby-9.4
      # - orb/changelog:
      #     <<: *config-3_2-small
      #     name: changelog
      #     requires:
      #       - build-3.2
      #     filters:
      #       branches:
      #         only: /bump_to_version_.*/
      #
      # ADD NEW RUBIES HERE
      - orb/build:
          <<: *config-2_7
          name: build-2.7
      - orb/test:
          <<: *config-2_7
          name: test-2.7
          requires:
            - build-2.7
      - orb/build:
          <<: *config-3_0
          name: build-3.0
      - orb/test:
          <<: *config-3_0
          name: test-3.0
          requires:
            - build-3.0
      - orb/build:
          <<: *config-3_1
          name: build-3.1
      - orb/test:
          <<: *config-3_1
          name: test-3.1
          requires:
            - build-3.1
      - orb/build:
          <<: *config-3_2
          name: build-3.2
      - orb/test:
          <<: *config-3_2
          name: test-3.2
          requires:
            - build-3.2
      - orb/build:
          <<: *config-3_3
          name: build-3.3
      - orb/test:
          <<: *config-3_3
          name: test-3.3
          requires:
            - build-3.3
      # ADD NEW RUBIES HERE
      - orb/build:
          <<: *config-jruby-9_4
          name: build-jruby-9.4
      - orb/test:
          <<: *config-jruby-9_4
          name: test-jruby-9.4
          requires:
            - build-jruby-9.4
      # Release jobs
      # - "deploy prerelease Gem":
      #     <<: *filters_all_branches_and_tags
      #     requires:
      #       - lint
      #       - test-2.7
      #       - test-3.0
      #       - test-3.1
      #       - test-3.2
      #       - test-3.3
      #       # ADD NEW RUBIES HERE
      #       - test-jruby-9.4
      # - "deploy release":
      #     <<: *filters_only_release_tags
      #     requires:
      #       - lint
      #       - test-2.7
      #       - test-3.0
      #       - test-3.1
      #       - test-3.2
      #       - test-3.3
      #       # ADD NEW RUBIES HERE
      #       - test-jruby-9.4
