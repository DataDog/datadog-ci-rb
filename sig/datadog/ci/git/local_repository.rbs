module Datadog
  module CI
    module Git
      module LocalRepository
        class GitCommandExecutionError < StandardError
          attr_reader command: String
          attr_reader output: String?
          attr_reader status: Process::Status?

          def initialize: (String message, output: String?, command: String, status: Process::Status?) -> void
        end

        POSSIBLE_BASE_BRANCHES: Array[String]
        DEFAULT_LIKE_BRANCH_FILTER: Regexp

        UNSHALLOW_TIMEOUT: 500
        LONG_TIMEOUT: 30
        SHORT_TIMEOUT: 3

        self.@root: String
        self.@prefix_to_root: String
        self.@repository_name: String

        def self.root: -> String

        def self.repository_name: -> String

        def self.current_folder_name: -> String

        def self.relative_to_root: (String? path) -> String

        def self.git_repository_url: () -> String?

        def self.git_root: () -> String?

        def self.git_commit_sha: () -> String?

        def self.git_branch: () -> String?

        def self.git_tag: () -> String?

        def self.git_commit_message: () -> String?

        def self.git_commit_users: () -> Array[Datadog::CI::Git::User]

        def self.git_commits: () -> Array[String]

        def self.git_commits_rev_list: (included_commits: Enumerable[String], excluded_commits: Enumerable[String]) -> String?

        def self.git_generate_packfiles: (included_commits: Enumerable[String], excluded_commits: Enumerable[String], path: String) -> String?

        def self.git_shallow_clone?: () -> bool

        def self.git_unshallow: () -> String?

        def self.get_changed_files_from_diff: (String? base_commit) -> ::Set[String]?

        def self.base_commit_sha: (?base_branch: String?) -> String?

        private

        def self.get_source_branch: () -> String?

        def self.get_remote_name: () -> String

        def self.get_upstream_branch: () -> String?

        def self.remove_remote_prefix: (String? branch_name, String remote_name) -> String?

        def self.main_like_branch?: (String? branch_name, String remote_name) -> bool?

        def self.detect_default_branch: (String remote_name) -> String?

        def self.find_fallback_default_branch: (String remote_name) -> String?

        def self.build_candidate_list: (String remote_name) -> Array[String]?

        def self.compute_branch_metrics: (Array[String] candidates, String target_branch) -> Array[BranchMetric]

        def self.find_best_branch: (Array[BranchMetric] metrics, String remote_name) -> String?

        def self.branches_equal?: (String? branch_name, String? default_branch, String remote_name) -> bool

        def self.filter_invalid_commits: (Enumerable[String] commits) -> Array[String]

        def self.exec_git_command: (Array[String] cmd, ?stdin: String?, ?timeout: Integer) -> String?

        def self.log_failure: (StandardError e, String action) -> void

        def self.check_and_fetch_base_branches: (Array[String] branches, String remote_name) -> void

        def self.check_and_fetch_branch: (String branch, String remote_name) -> void
      end
    end
  end
end
