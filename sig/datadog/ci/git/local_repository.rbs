module Datadog
  module CI
    module Git
      module LocalRepository
        self.@root: String
        self.@prefix_to_root: String
        self.@repository_name: String

        def self.root: -> String

        def self.repository_name: -> String

        def self.current_folder_name: -> String

        def self.relative_to_root: (String? path) -> String

        def self.git_repository_url: () -> String?

        def self.git_root: () -> String?

        def self.git_commit_sha: () -> String?

        def self.git_branch: () -> String?

        def self.git_tag: () -> String?

        def self.git_commit_message: (?String? commit_sha) -> String?

        def self.git_commit_users: (?String? commit_sha) -> Array[Datadog::CI::Git::User]

        def self.git_commits: () -> Array[String]

        def self.git_commits_rev_list: (included_commits: Enumerable[String], excluded_commits: Enumerable[String]) -> String?

        def self.git_generate_packfiles: (included_commits: Enumerable[String], excluded_commits: Enumerable[String], path: String) -> String?

        def self.git_shallow_clone?: () -> bool

        def self.git_unshallow: () -> String?

        def self.get_changes_since: (String? base_commit) -> Datadog::CI::Git::Diff

        def self.base_commit_sha: (?base_branch: String?) -> String?

        def self.get_upstream_branch: () -> String?

        def self.fetch_head_commit_sha: (String git_commit_sha) -> String?

        def self.get_remote_name: () -> String

        def self.filter_invalid_commits: (Enumerable[String] commits) -> Array[String]

        def self.log_failure: (StandardError e, String action) -> void
      end
    end
  end
end
