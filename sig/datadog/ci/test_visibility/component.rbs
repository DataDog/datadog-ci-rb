module Datadog
  module CI
    module TestVisibility
      class Component
        include Datadog::Core::Utils::Forking
        include Datadog::CI::Utils::Stateful

        FILE_STORAGE_KEY: String

        @test_suite_level_visibility_enabled: bool

        @codeowners: Datadog::CI::Codeowners::Matcher
        @context: Datadog::CI::TestVisibility::Context
        @context_client: Datadog::CI::TestVisibility::Context

        @context_service: untyped
        @context_service_uri: String
        @is_client_process: bool

        @known_tests_enabled: bool
        @known_tests: Set[String]
        @known_tests_client: Datadog::CI::TestVisibility::KnownTests

        attr_reader test_suite_level_visibility_enabled: bool

        attr_reader logical_test_session_name: String?

        attr_reader known_tests: Set[String]

        attr_reader known_tests_enabled: bool

        attr_reader context_service_uri: String

        def initialize: (known_tests_client: Datadog::CI::TestVisibility::KnownTests, ?test_suite_level_visibility_enabled: bool, ?codeowners: Datadog::CI::Codeowners::Matcher, ?logical_test_session_name: String?, ?context_service_uri: String?) -> void

        def configure: (Datadog::CI::Remote::LibrarySettings library_settings, Datadog::CI::TestSession test_session) -> void

        def trace_test: (String span_name, String test_suite_name, ?service: String?, ?tags: Hash[untyped, untyped]) ?{ (Datadog::CI::Test span) -> untyped } -> untyped

        def trace: (String span_name, ?type: String, ?tags: Hash[untyped, untyped]) ?{ (Datadog::CI::Span span) -> untyped } -> untyped

        def start_test_session: (?service: String?, ?tags: Hash[untyped, untyped], ?estimated_total_tests_count: Integer, ?distributed: bool) -> Datadog::CI::TestSession

        def start_test_module: (String test_module_name, ?service: String?, ?tags: Hash[untyped, untyped]) -> Datadog::CI::TestModule

        def start_test_suite: (String test_suite_name, ?service: String?, ?tags: Hash[untyped, untyped]) -> Datadog::CI::TestSuite

        def active_test_session: () -> Datadog::CI::TestSession?

        def active_test_module: () -> Datadog::CI::TestModule?

        def active_test_suite: (String test_suite_name) -> Datadog::CI::TestSuite?

        def active_test: () -> Datadog::CI::Test?

        def active_span: () -> Datadog::CI::Span?

        def deactivate_test: () -> void

        def deactivate_test_session: () -> void

        def deactivate_test_module: () -> void

        def deactivate_test_suite: (String test_suite_name) -> void

        def total_tests_count: () -> Integer

        def tests_skipped_by_tia_count: () -> Integer

        def itr_enabled?: () -> bool

        def shutdown!: () -> void

        def client_process?: () -> bool

        private

        # Implementation of Stateful interface
        def serialize_state: () -> Hash[Symbol, untyped]

        def restore_state: (Hash[Symbol, untyped] state) -> void

        def configure_library: (Datadog::CI::TestSession test_session) -> void

        def fix_test_suite!: (Datadog::CI::Test test) -> void

        def set_codeowners: (Datadog::CI::Span span) -> void

        def null_span: () -> Datadog::CI::Span

        def skip_tracing: (?untyped block) -> untyped

        def validate_test_suite_level_visibility_correctness: (Datadog::CI::Test test) -> void

        def on_test_session_started: (Datadog::CI::TestSession test_session) -> void

        def on_test_module_started: (Datadog::CI::TestModule test_module) -> void

        def on_test_suite_started: (Datadog::CI::TestSuite test_suite) -> void

        def on_test_started: (Datadog::CI::Test test) -> void

        def on_test_session_finished: (Datadog::CI::TestSession test_session) -> void

        def on_test_module_finished: (Datadog::CI::TestModule test_module) -> void

        def on_test_suite_finished: (Datadog::CI::TestSuite test_suite) -> void

        def on_test_finished: (Datadog::CI::Test test) -> void

        def on_after_test_span_finished: (Datadog::Tracing::SpanOperation span) -> void

        def subscribe_to_after_stop_event: (Datadog::Tracing::SpanOperation span) -> void

        def override_logical_test_session_name!: (Datadog::CI::TestSession test_session) -> void

        def mark_test_as_new: (Datadog::CI::Test test_span) -> void

        def fetch_known_tests: (Datadog::CI::TestSession) -> void

        def new_test?: (Datadog::CI::Test test_span) -> bool

        def test_optimisation: () -> Datadog::CI::TestOptimisation::Component

        def test_retries: () -> Datadog::CI::TestRetries::Component

        def git_tree_upload_worker: () -> Datadog::CI::Worker

        def remote: () -> Datadog::CI::Remote::Component

        def test_management: () -> Datadog::CI::TestManagement::Component

        def start_drb_service: () -> void

        def maybe_remote_context: () -> Datadog::CI::TestVisibility::Context
      end
    end
  end
end

module DRb
  def self.start_service: (?String uri, ?Object obj) -> untyped

  module DRbUndumped
  end
end

class DRbObject
  def self.new_with_uri: (String uri) -> untyped
end
