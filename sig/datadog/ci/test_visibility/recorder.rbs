module Datadog
  module CI
    module TestVisibility
      class Recorder
        @test_suite_level_visibility_enabled: bool

        @environment_tags: Hash[String, String]
        @local_context: Datadog::CI::TestVisibility::Context::Local
        @global_context: Datadog::CI::TestVisibility::Context::Global
        @codeowners: Datadog::CI::Codeowners::Matcher

        @null_span: Datadog::CI::NullSpan

        attr_reader environment_tags: Hash[String, String]
        attr_reader test_suite_level_visibility_enabled: bool

        def initialize: (?test_suite_level_visibility_enabled: bool, ?codeowners: Datadog::CI::Codeowners::Matcher) -> void

        def trace_test: (String span_name, String test_suite_name, ?service: String?, ?tags: Hash[untyped, untyped]) ?{ (Datadog::CI::Span span) -> untyped } -> untyped

        def trace: (String span_name, ?type: String, ?tags: Hash[untyped, untyped]) ?{ (Datadog::CI::Span span) -> untyped } -> untyped

        def start_test_session: (?service: String?, ?tags: Hash[untyped, untyped]) -> Datadog::CI::Span

        def start_test_module: (String test_module_name, ?service: String?, ?tags: Hash[untyped, untyped]) -> Datadog::CI::Span

        def start_test_suite: (String test_suite_name, ?service: String?, ?tags: Hash[untyped, untyped]) -> Datadog::CI::Span

        def active_test_session: () -> Datadog::CI::TestSession?

        def active_test_module: () -> Datadog::CI::TestModule?

        def active_test_suite: (String test_suite_name) -> Datadog::CI::TestSuite?

        def active_test: () -> Datadog::CI::Test?

        def active_span: () -> Datadog::CI::Span?

        def deactivate_test: () -> void

        def deactivate_test_session: () -> void

        def deactivate_test_module: () -> void

        def deactivate_test_suite: (String test_suite_name) -> void

        private

        def create_datadog_span: (String span_name, ?span_options: Hash[untyped, untyped], ?tags: Hash[untyped, untyped]) ?{ (Datadog::CI::Span span) -> untyped } -> untyped

        def set_trace_origin: (Datadog::Tracing::TraceOperation trace) -> untyped

        def build_test: (Datadog::Tracing::SpanOperation tracer_span, Hash[untyped, untyped] tags) -> Datadog::CI::Test

        def build_test_session: (Datadog::Tracing::SpanOperation tracer_span, Hash[untyped, untyped] tags) -> Datadog::CI::TestSession

        def build_test_module: (Datadog::Tracing::SpanOperation tracer_span, Hash[untyped, untyped] tags) -> Datadog::CI::TestModule

        def build_test_suite: (Datadog::Tracing::SpanOperation tracer_span, Hash[untyped, untyped] tags) -> Datadog::CI::TestSuite

        def build_span: (Datadog::Tracing::SpanOperation tracer_span, Hash[untyped, untyped] tags) -> Datadog::CI::Span

        def build_span_options: (String? service_name, String type, ?Hash[Symbol, untyped] other_options) -> Hash[Symbol, untyped]

        def set_initial_tags: (Datadog::CI::Span ci_span, Hash[untyped, untyped] tags) -> void

        # the type (Datadog::CI::TestSession | Datadog::Tracing::SpanOperation) screams of wrong/mising abstraction
        def set_session_context: (Hash[untyped, untyped] tags, ?Datadog::CI::TestSession | Datadog::Tracing::SpanOperation? test_session) -> void

        def set_suite_context: (Hash[untyped, untyped] tags, ?span: Datadog::Tracing::SpanOperation, ?name: String) -> void

        def set_module_context: (Hash[untyped, untyped] tags, ?Datadog::CI::TestModule | Datadog::Tracing::SpanOperation? test_module) -> void

        def set_codeowners: (Datadog::CI::Test test) -> void

        def null_span: () -> Datadog::CI::Span

        def skip_tracing: (?untyped block) -> untyped

        def start_datadog_tracer_span: (String span_name, Hash[untyped, untyped] span_options) ?{ (untyped) -> untyped } -> untyped

        def set_inherited_globals: (Hash[untyped, untyped] tags) -> void

        def validate_test_suite_level_visibility_correctness: (Datadog::CI::Test test) -> void
      end
    end
  end
end
