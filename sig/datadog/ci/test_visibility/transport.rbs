module Datadog
  module CI
    module TestVisibility
      class Transport < Datadog::CI::Transport::EventPlatformTransport
        attr_reader serializers_factory: singleton(Datadog::CI::TestVisibility::Serializers::Factories::TestLevel) | singleton(Datadog::CI::TestVisibility::Serializers::Factories::TestSuiteLevel)
        attr_reader dd_env: String?

        @dd_env: String?
        @serializers_factory: singleton(Datadog::CI::TestVisibility::Serializers::Factories::TestLevel) | singleton(Datadog::CI::TestVisibility::Serializers::Factories::TestSuiteLevel)
        @test_optimisation: Datadog::CI::TestOptimisation::Component?

        def initialize: (
          api: Datadog::CI::Transport::Api::Base,
          dd_env: ::String?,
          ?serializers_factory: singleton(Datadog::CI::TestVisibility::Serializers::Factories::TestLevel) | singleton(Datadog::CI::TestVisibility::Serializers::Factories::TestSuiteLevel),
          ?max_payload_size: Integer
        ) -> void

        private

        def send_payload: (String encoded_payload) -> Datadog::CI::Transport::Adapters::Net::Response
        def encode_events: (Array[Datadog::Tracing::TraceSegment] traces) -> ::Array[String]
        def encode_span: (Datadog::Tracing::TraceSegment trace, Datadog::Tracing::Span span) -> String?
        def itr: () -> Datadog::CI::TestOptimisation::Component?
      end
    end
  end
end
