module Datadog
  module CI
    module TestVisibility
      class Context
        include Datadog::Core::Utils::Forking

        @local_context: Datadog::CI::TestVisibility::Store::Local
        @global_context: Datadog::CI::TestVisibility::Store::Global
        @global_context_client: Datadog::CI::TestVisibility::Store::Global

        @global_context_uri: String

        @environment_tags: Hash[String, String]

        def initialize: () -> void

        def trace_test: (String span_name, String test_suite_name, ?service: String?, ?tags: Hash[untyped, untyped]) ?{ (Datadog::CI::Test span) -> untyped } -> untyped

        def trace: (String span_name, ?type: String, ?tags: Hash[untyped, untyped]) ?{ (Datadog::CI::Span span) -> untyped } -> untyped

        def start_test_session: (?service: String?, ?tags: Hash[untyped, untyped]) -> Datadog::CI::TestSession

        def start_test_module: (String test_module_name, ?service: String?, ?tags: Hash[untyped, untyped]) -> Datadog::CI::TestModule

        def start_test_suite: (String test_suite_name, ?service: String?, ?tags: Hash[untyped, untyped]) -> Datadog::CI::TestSuite

        def active_test_session: () -> Datadog::CI::TestSession?

        def active_test_module: () -> Datadog::CI::TestModule?

        def active_test_suite: (String test_suite_name) -> Datadog::CI::TestSuite?

        def single_active_test_suite: () -> Datadog::CI::TestSuite?

        def active_test: () -> Datadog::CI::Test?

        def active_span: () -> Datadog::CI::Span?

        def deactivate_test: () -> void

        def deactivate_test_session: () -> void

        def deactivate_test_module: () -> void

        def deactivate_test_suite: (String test_suite_name) -> void

        def total_tests_count: () -> Integer

        def incr_total_tests_count: () -> void

        def tests_skipped_by_tia_count: () -> Integer

        def incr_tests_skipped_by_tia_count: () -> void

        private

        def build_test: (Datadog::Tracing::SpanOperation tracer_span, Hash[untyped, untyped] tags) -> Datadog::CI::Test

        def build_test_session: (Datadog::Tracing::SpanOperation tracer_span, Hash[untyped, untyped] tags) -> Datadog::CI::TestSession

        def build_test_module: (Datadog::Tracing::SpanOperation tracer_span, Hash[untyped, untyped] tags) -> Datadog::CI::TestModule

        def build_test_suite: (Datadog::Tracing::SpanOperation tracer_span, Hash[untyped, untyped] tags) -> Datadog::CI::TestSuite

        def build_span: (Datadog::Tracing::SpanOperation tracer_span, Hash[untyped, untyped] tags) -> Datadog::CI::Span

        def set_trace_origin: (Datadog::Tracing::TraceOperation trace) -> void

        def set_initial_tags: (Datadog::CI::Span ci_span, Hash[untyped, untyped] tags) -> void

        def set_inherited_globals: (Hash[untyped, untyped] tags) -> void

        def set_session_context: (Hash[untyped, untyped] tags, ?Datadog::CI::TestSession | Datadog::Tracing::SpanOperation? test_session) -> void

        def set_suite_context: (Hash[untyped, untyped] tags, ?span: Datadog::Tracing::SpanOperation, ?name: String) -> void

        def set_module_context: (Hash[untyped, untyped] tags, ?Datadog::CI::TestModule | Datadog::Tracing::SpanOperation? test_module) -> void

        def start_datadog_tracer_span: (String span_name, Hash[untyped, untyped] span_options) ?{ (untyped) -> untyped } -> untyped

        def build_tracing_span_options: (String? service_name, String type, ?Hash[Symbol, untyped] other_options) -> Hash[Symbol, untyped]

        def start_drb_service: () -> void

        def global_context: () -> Datadog::CI::TestVisibility::Store::Global
      end
    end
  end
end

module DRb
  def self.start_service: (String uri, ?Object obj) -> untyped
end

class DRbObject
  def self.new_with_uri: (String uri) -> untyped
end