module Datadog
  module CI
    module TestRetries
      class Component
        FIBER_LOCAL_CURRENT_RETRY_DRIVER_KEY: Symbol

        @mutex: Thread::Mutex

        @retry_strategies: Array[Datadog::CI::TestRetries::Strategy::Base]

        @retry_failed_strategy: Datadog::CI::TestRetries::Strategy::RetryFailed

        @retry_new_strategy: Datadog::CI::TestRetries::Strategy::RetryNew

        def initialize: (retry_failed_tests_enabled: bool, retry_failed_tests_max_attempts: Integer, retry_failed_tests_total_limit: Integer, retry_new_tests_enabled: bool, retry_flaky_fixed_tests_enabled: bool, retry_flaky_fixed_tests_max_attempts: Integer) -> void

        def configure: (Datadog::CI::Remote::LibrarySettings library_settings, Datadog::CI::TestSession test_session) -> void

        def with_retries: () { () -> void } -> void

        def build_driver: (Datadog::CI::Test test) -> Datadog::CI::TestRetries::Driver::Base

        def record_test_finished: (Datadog::CI::Test test) -> void

        def record_test_span_duration: (Datadog::Tracing::SpanOperation span) -> void

        def reset_retries!: () -> void

        def should_retry?: () -> bool

        def tag_last_retry: (Datadog::CI::Test test) -> void

        def auto_test_retries_feature_enabled: () -> bool

        def early_flake_detection_feature_enabled: () -> bool

        private

        def current_retry_driver: () -> Datadog::CI::TestRetries::Driver::Base?

        def current_retry_driver=: (Datadog::CI::TestRetries::Driver::Base? driver) -> void
      end
    end
  end
end
