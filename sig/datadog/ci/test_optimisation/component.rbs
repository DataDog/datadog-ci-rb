module Datadog
  module CI
    module TestOptimisation
      class Component
        include Datadog::Core::Utils::Forking
        include Datadog::CI::Utils::Stateful

        FILE_STORAGE_KEY: String

        @enabled: bool
        @test_skipping_enabled: bool
        @code_coverage_enabled: bool
        @correlation_id: String?
        @skippable_tests: Set[String]
        @coverage_writer: Datadog::CI::AsyncWriter?

        @api: Datadog::CI::Transport::Api::Base?
        @dd_env: String?
        @config_tags: Hash[String, String]

        @bundle_location: String?
        @use_single_threaded_coverage: bool
        @use_allocation_tracing: bool

        @mutex: Thread::Mutex

        attr_reader skippable_tests: Set[String]
        attr_reader correlation_id: String?
        attr_reader enabled: bool
        attr_reader code_coverage_enabled: bool
        attr_reader test_skipping_enabled: bool
        attr_reader skippable_tests_fetch_error: String?

        def initialize: (dd_env: String?, ?enabled: bool, ?coverage_writer: Datadog::CI::AsyncWriter?, ?api: Datadog::CI::Transport::Api::Base?, ?config_tags: Hash[String, String]?, ?bundle_location: String?, ?use_single_threaded_coverage: bool, ?use_allocation_tracing: bool) -> void

        def configure: (Datadog::CI::Remote::LibrarySettings remote_configuration, Datadog::CI::TestSession test_session) -> void

        def enabled?: () -> bool

        def skipping_tests?: () -> bool

        def code_coverage?: () -> bool

        def start_coverage: (Datadog::CI::Test test) -> void

        def stop_coverage: (Datadog::CI::Test test) -> Datadog::CI::TestOptimisation::Coverage::Event?

        def skippable?: (String datadog_test_id) -> bool

        def mark_if_skippable: (Datadog::CI::Test test) -> void

        def on_test_finished: (Datadog::CI::Test test, Datadog::CI::TestVisibility::Context context) -> void

        def write_test_session_tags: (Datadog::CI::TestSession test_session, Integer skipped_tests_count) -> void

        def shutdown!: () -> void

        def skippable_tests_count: () -> Integer

        # Implementation of Stateful interface
        def serialize_state: () -> Hash[Symbol, untyped]

        def restore_state: (Hash[Symbol, untyped] state) -> void

        def storage_key: () -> String

        private

        def coverage_collector: () -> Datadog::CI::TestOptimisation::Coverage::DDCov?

        def load_datadog_cov!: () -> void

        def write: (Datadog::CI::TestOptimisation::Coverage::Event event) -> void

        def ensure_test_source_covered: (String test_source_file, Hash[String, untyped] coverage) -> void

        def fetch_skippable_tests: (Datadog::CI::TestSession test_session) -> void

        def increment_skipped_tests_counter: () -> void

        def code_coverage_mode: () -> Datadog::CI::TestOptimisation::Coverage::DDCov::threading_mode

        def git_tree_upload_worker: () -> Datadog::CI::Worker
      end
    end
  end
end
