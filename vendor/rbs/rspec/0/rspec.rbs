module RSpec
  def self.configuration: () -> RSpec::Core::Configuration
  def self.world: () -> RSpec::Core::World
end

module RSpec::Core
end

module RSpec::Queue
end

module RSpec::Queue::Runner
end

module RSpec::Queue::ExampleExtension
end

module RSpec::Core::Example
  @exception: untyped

  attr_reader reporter: untyped

  def run: () -> untyped
  def execution_result: () -> untyped
  def metadata: () -> untyped
  def description: () -> String
  def full_description: () -> String
  def finish: (untyped) -> void
end

class RSpec::Core::ConfigurationOptions
  def initialize: (Array[String] args) -> void
end

class RSpec::Core::Runner
  def initialize: (RSpec::Core::ConfigurationOptions configuration) -> void

  def run: (untyped stdout, untyped stderr) -> Integer
  def run_specs: (untyped example_groups) -> untyped
end

module RSpec::Core::ExampleGroup
  module ClassMethods
    def run: () -> bool
    def top_level?: () -> bool
    def file_path: () -> String
    def description: () -> String
    def metadata: () -> untyped
    def descendant_filtered_examples: () -> Array[untyped]
  end
end

class RSpec::Core::NullReporter
end

class RSpec::Core::Configuration
  def dry_run?: () -> bool
end

class RSpec::Core::World
  def wants_to_quit: () -> bool
  def example_count: () -> Integer
end

module RSpec::Core::Notifications
end

class RSpec::Core::Notifications::ExampleNotification
  def example: () -> RSpec::Core::Example
end

module RSpec::Core::Formatters
  def self.register: (untyped formatter, *untyped method_names) -> void
end

class RSpec::Core::Formatters::BaseTextFormatter
  def output: () -> IO
end

class RSpec::Core::Formatters::DocumentationFormatter
  @group_level: Integer

  def output: () -> IO

  def current_indentation: () -> String

  def example_started: (RSpec::Core::Notifications::ExampleNotification) -> void
  def example_passed: (RSpec::Core::Notifications::ExampleNotification) -> void
  def example_failed: (RSpec::Core::Notifications::ExampleNotification) -> void
  def example_pending: (RSpec::Core::Notifications::ExampleNotification) -> void
  def dump_summary: (untyped notification) -> void
end
